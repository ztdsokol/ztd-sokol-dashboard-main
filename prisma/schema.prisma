// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model MemberRole {
  id                String    @id @default(uuid())
  name              String
  members           MemberMemberRole[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Member {
  id                String    @id @default(uuid())
  name              String
  memberRoles       MemberMemberRole[]
  groups            GroupMember[]
  birthdate         DateTime?
  oib_number        Int
  contact_name      String
  phone             String
  email             String
  address           String
  notes             String?
  isActive          Boolean @default(true)
  discount          Int
  one_time_discount Int
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@unique([id])
}

model Group {
  id                String    @id @default(uuid())
  name              String
  location          Location @relation("LocationToGroup", fields: [locationId], references: [id])
  locationId        String
  program           Program @relation("ProgramToGroup", fields: [programId], references: [id])
  programId         String
  members           GroupMember[]  // morat cemo dodati posebni model za trebn
  trainers  GroupMember[] @relation("GroupToTrainers")  // m2m relation trainers 
  price             Int
  term              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@map("AppGroup")
  @@index([locationId])
  @@index([programId])
}

model GroupMember {
  group             Group   @relation(fields: [groupId], references: [id])
  groupId           String
  member            Member  @relation(fields: [memberId], references: [id])
  memberId          String
  trainerGroupId String?
  trainerGroup   Group? @relation("GroupToTrainers", fields: [trainerGroupId], references: [id])
  
  @@id([groupId, memberId])
  @@index([groupId])
  @@index([memberId])
  @@index([trainerGroupId])
}

model Location {
  id                String    @id @default(uuid())
  name              String
  groups            Group[]  @relation("LocationToGroup")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Program {
  id                String    @id @default(uuid())
  name              String
  groups            Group[]  @relation("ProgramToGroup")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Invoice {
    id                String    @id @default(uuid())
    invoiceNumber     Int 
    price             Int
    memberName        String
    groupPrice        Int
    eDicount          Int
  @@unique([id,invoiceNumber])
}


model MemberMemberRole {
  memberRoles             MemberRole   @relation(fields: [memberRoleId], references: [id])
  memberRoleId            String
  members           Member  @relation(fields: [memberId], references: [id])
  memberId          String
  
  @@index([memberRoleId])
  @@index([memberId])
  @@id([memberRoleId, memberId])
}

model Campaign {
  id                 String    @id @default(uuid())
  name               String
  message               String
  members              String? // m2m relation users
  groups             String? // m2m relation groups
  price              Int
  paymentDescription String?
  createdAt          DateTime @default(now())
  isSent             Boolean? @default(false)
}



// model Trainer {
//   id                String    @id @default(uuid())
//   name              String
//   students          TrainerStudent[]
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }

// model Student {
//   id                String    @id @default(uuid())
//   name              String
//   trainers        TrainerStudent[] 
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }

// model TrainerStudent {
//   students             Student   @relation(fields: [studentId], references: [id])
//   studentId            String
//   trainers           Trainer  @relation(fields: [trainerId], references: [id])
//   trainerId          String
  
//   @@index([studentId])
//   @@index([trainerId])
//   @@id([studentId, trainerId])
// }


// model Trainer {
//   id                String    @id @default(uuid())
//   name              String
//   students          Student[]
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }

// model Student {
//   id                String    @id @default(uuid())
//   name              String
//   trainers        Trainer[]
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }